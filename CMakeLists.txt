cmake_minimum_required( VERSION 3.8 )

project( openssl )

include( BuildOpenSSL.cmake )
include( Lipo.cmake )

set( OPENSSL_LIBCRYPTO_STATIC ${CMAKE_STATIC_LIBRARY_PREFIX}crypto${CMAKE_STATIC_LIBRARY_SUFFIX} )
set( OPENSSL_LIBSSL_STATIC ${CMAKE_STATIC_LIBRARY_PREFIX}ssl${CMAKE_STATIC_LIBRARY_SUFFIX} )
set( OPENSSL_LIBCRYPTO_SHARED ${CMAKE_SHARED_LIBRARY_PREFIX}crypto${CMAKE_SHARED_LIBRARY_SUFFIX} )
set( OPENSSL_LIBSSL_SHARED ${CMAKE_SHARED_LIBRARY_PREFIX}ssl${CMAKE_SHARED_LIBRARY_SUFFIX} )

set( INSTALL_DIR ${CMAKE_BINARY_DIR}/openssl )
set( INSTALL_DIR_LIB ${INSTALL_DIR}/lib )
set( INSTALL_DIR_INCLUDE ${INSTALL_DIR}/include )
set( INSTALL_PATH_CRYPTO_STATIC ${INSTALL_DIR_LIB}/${OPENSSL_LIBCRYPTO_STATIC} )
set( INSTALL_PATH_SSL_STATIC ${INSTALL_DIR_LIB}/${OPENSSL_LIBSSL_STATIC} )
set( INSTALL_PATH_CRYPTO_SHARED ${INSTALL_DIR_LIB}/${OPENSSL_LIBCRYPTO_SHARED} )
set( INSTALL_PATH_SSL_SHARED ${INSTALL_DIR_LIB}/${OPENSSL_LIBSSL_SHARED} )

set( SDKS iphoneos iphonesimulator )
set( OPENSSL_TARGET_ARCHITECTURES_iphoneos armv7 armv7s arm64 )
set( OPENSSL_TARGET_ARCHITECTURES_iphonesimulator i386 x86_64 )

set( BUILD_FRAMEWORK on CACHE BOOL "" )
set( BITCODE_ENABLED on CACHE BOOL "" )
set( BUILD_SHARED on CACHE BOOL "" )

set( OPENSSL_BOOL_OPTIONS )
if( BUILD_FRAMEWORK )
    list( APPEND OPENSSL_BOOL_OPTIONS FRAMEWORK )
endif()
if( BUILD_SHARED )
    list( APPEND OPENSSL_BOOL_OPTIONS DYLIB )
endif()
if( BITCODE_ENABLED )
    list( APPEND OPENSSL_BOOL_OPTIONS BITCODE )
endif()

set( OPENSSL_TARGETS )
set( OPENSSL_INCLUDES_STAMPS )
set( OPENSSL_INCLUDES )
set( OPENSSL_THIN_CRYPTO_STATIC_LIBS )
set( OPENSSL_THIN_SSL_STATIC_LIBS )
set( OPENSSL_THIN_CRYPTO_SHARED_LIBS )
set( OPENSSL_THIN_SSL_SHARED_LIBS )
foreach( SDK ${SDKS} )
    set( OPENSSL_INCLUDES_${SDK} )
    set( OPENSSL_THIN_CRYPTO_STATIC_LIB_${SDK} )
    set( OPENSSL_THIN_SSL_STATIC_LIB_${SDK} )
    set( OPENSSL_THIN_CRYPTO_SHARED_LIB_${SDK} )
    set( OPENSSL_THIN_SSL_SHARED_LIB_${SDK} )

    execute_process( COMMAND xcrun --sdk ${SDK} --show-sdk-path
            OUTPUT_VARIABLE XCODE_SDK_PATH
            OUTPUT_STRIP_TRAILING_WHITESPACE )

    set( PER_SDK_INSTALL_DIR ${INSTALL_DIR}/${SDK} )
    BuildOpenSSL(
            SDK ${SDK}
            SDK_PATH ${XCODE_SDK_PATH}
            TARGET_ARCHITECTURES ${OPENSSL_TARGET_ARCHITECTURES_${SDK}}
            INSTALL_DIR ${PER_SDK_INSTALL_DIR}
            OPTIONS ${OPENSSL_STANDARD_OPTIONS}
            ${OPENSSL_BOOL_OPTIONS} )

    list( APPEND OPENSSL_INCLUDES_STAMPS ${OPENSSL_INCLUDES_STAMP_${SDK}} )
    list( APPEND OPENSSL_INCLUDES ${OPENSSL_INCLUDES_${SDK}} )
    list( APPEND OPENSSL_THIN_CRYPTO_STATIC_LIBS ${OPENSSL_THIN_CRYPTO_STATIC_LIB_${SDK}} )
    list( APPEND OPENSSL_THIN_SSL_STATIC_LIBS ${OPENSSL_THIN_SSL_STATIC_LIB_${SDK}} )
    if( BUILD_SHARED )
        list( APPEND OPENSSL_THIN_CRYPTO_SHARED_LIBS ${OPENSSL_THIN_CRYPTO_SHARED_LIB_${SDK}} )
        list( APPEND OPENSSL_THIN_SSL_SHARED_LIBS ${OPENSSL_THIN_SSL_SHARED_LIB_${SDK}} )
    endif()
endforeach( SDK )

Lipo( INPUTS ${OPENSSL_THIN_CRYPTO_STATIC_LIBS} OUTPUT ${INSTALL_PATH_CRYPTO_STATIC} )
Lipo( INPUTS ${OPENSSL_THIN_SSL_STATIC_LIBS} OUTPUT ${INSTALL_PATH_SSL_STATIC} )

if( BUILD_SHARED )
    Lipo( INPUTS ${OPENSSL_THIN_CRYPTO_SHARED_LIBS} OUTPUT ${INSTALL_PATH_CRYPTO_SHARED} )
    Lipo( INPUTS ${OPENSSL_THIN_SSL_SHARED_LIBS} OUTPUT ${INSTALL_PATH_SSL_SHARED} )
endif()

list( GET OPENSSL_INCLUDES 0 OPENSSL_INCLUDES_DIR )
set( OPENSSL_INCLUDES_STAMP ${INSTALL_DIR}/openssl_include.stamp)
add_custom_command( OUTPUT ${OPENSSL_INCLUDES_STAMP}
        DEPENDS ${OPENSSL_INCLUDES_STAMPS}
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${OPENSSL_INCLUDES_DIR} ${INSTALL_DIR_INCLUDE}
        COMMAND touch ${OPENSSL_INCLUDES_STAMP}
        COMMENT "Copying OpenSSL ${OPENSSL_INCLUDES_DIR} to ${INSTALL_DIR_INCLUDE}" )

add_custom_target( openssl_build ALL
        DEPENDS
            ${OPENSSL_INCLUDES_STAMP}
            ${INSTALL_PATH_CRYPTO_STATIC}
            ${INSTALL_PATH_SSL_STATIC}
            ${INSTALL_PATH_CRYPTO_SHARED}
            ${INSTALL_PATH_SSL_SHARED} )

# Package OpenSSL as a static, dynamic or framework
if( BUILD_SHARED_LIBS AND BUILD_FRAMEWORK )
    add_library( OpenSSL SHARED ${INSTALL_PATH_CRYPTO_SHARED} ${INSTALL_PATH_SSL_SHARED} )
    set_target_properties( OpenSSL PROPERTIES
            FRAMEWORK TRUE
            MACOSX_FRAMEWORK_IDENTIFIER org.openssl.openssl_framework
            MACOSX_FRAMEWORK_INFO_PLIST Info.plist
            # "current version" in semantic format in Mach-O binary file
            VERSION 1.0.2
            # "compatibility version" in semantic format in Mach-O binary file
            SOVERSION 1.0.2
            PUBLIC_HEADER dynamicFramework.h )
endif()
